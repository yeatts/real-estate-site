// TODO: Image type is causing issues with styling overrides. Documentation directs to style in-line, but having type issues trying to do it that way. Need to dig in further...https://nextjs.org/docs/pages/api-reference/components/image#style
// TODO: (optional exercise / for fun) use intersection observers to set up animations as you scroll the page.

.main {
  align-items: start;
  display: grid;
  grid-template-areas:
    "hero"
    "bio"
    "contact";
  // TODO: investigate ways to make gta more dynamic. Right now, new sections would need to be manually added. If not added, it will probably look fine (grid-auto-flow default will wrap new elements to next row.)
  grid-template-columns: 100%;
  grid-template-rows: auto;
  height: fit-content;
  justify-content: center;
  width: 100%;
}

// Default Properties for main section elements //
section {
  align-content: center;
  align-items: center;
  display: grid;
  height: 100vh;
  justify-content: center;
  justify-items: center;
  position: relative;
  width: 100vw;
}

// Hero: Section 1 //

.hero {
  grid-area: hero;

  .heroImage {
    filter: brightness(40%);
    height: 100%;
    object-fit: cover;
    z-index: 0;
  }

  .heroBody {
    align-content: center;
    align-items: center;
    color: var(--global-text-color-light);
    display: grid;
    grid-template-columns: 100%;
    grid-gap: var(--global-grid-gap-default);
    height: 100%;
    justify-content: center;
    justify-items: center;
    position: absolute;
    text-align: center;
    width: 100%;
    z-index: 1;

    h1 {
      color: var(--global-secondary-color);
      font-size: 5rem;
      font-weight: 300;
    }

    .heroButtonGroup {
      align-content: center;
      align-items: center;
      display: grid;
      width: 100%;
      justify-content: center;
      justify-items: center;
    }
  }
}

// Bio: Section 2 //

.bio {
  background-color: var(--global-secondary-color);
  grid-area: bio;
  // grid-template-columns: 1fr 1fr; // TODO: replacing this with auto-fit / minmax combo should allow us to eliminate the media query at 850px
  grid-template-columns: repeat(auto-fit, minmax(calc(var(--media-query-default-850px) / 2), 1fr));

  .bioImgContainer {
    object-fit: cover;
    position: relative;
    width: 100%;

    .bioImage {
      height: 20rem;
      object-fit: cover;
      position: relative;
    }
  }

  .bioText {
    align-content: center;
    align-items: center;
    display: grid;
    grid-template-columns: 100%;
    grid-gap: var(--global-grid-gap-default);
    height: 100%;
    justify-content: center;
    justify-items: center;
    padding: 4rem 2rem;
    position: relative;
    width: 100%;

    h1 {
      font-size: 3rem;
      font-weight: 300;
      text-align: center;
    }

    p {
      font-size: 1rem;
      letter-spacing: 1px;
      line-height: 1.5;
      text-align: center;
    }
  }
}

// Contact: Section 3 //

.contact {
  grid-area: contact;

  .contactBgImg {
    filter: brightness(80%);
    height: 100%;
    object-fit: cover;
    z-index: 0;
  }

  .contactBody {
    align-content: center;
    align-items: center;
    color: var(--global-text-color-light);
    display: grid;
    grid-template-columns: 100%;
    grid-gap: var(--global-grid-gap-default);
    height: 100%;
    justify-content: center;
    justify-items: center;
    position: absolute;
    padding: 4rem 4rem;
    text-align: center;
    width: 100%;
    z-index: 1;

    h1 {
      color: var(--global-secondary-color);
      font-size: 4rem;
      font-weight: 300;
      text-align: center;
    }

    .contactButtonGroup {
      align-content: center;
      align-items: center;
      display: grid;
      width: 100%;
      justify-content: center;
      justify-items: center;
    }
  }
}

.unused {
  display: none;
}


// manually double the minimum height of the container, adjust childrens' height to half the container.

@media (max-width: var(--media-query-default-850px)) {
  .bio {

    .bioImgContainer {
      min-height: 50%;
    }

    .bioText {
      min-height: 50%;
    }
  }
}

// TODO: consider using CSS auto-fit properties to get rid of the font-size-only media queries.

@media (max-width: 650px) {
  .hero {
    .heroBody {
      h1 {
        font-size: 4rem;
      }
    }
  }
}

@media (max-width: 475px) {
  .hero {
    .heroBody {
      h1 {
        font-size: 3.5rem;
      }
    }
  }
}

// 

@media (max-width: 250px) {
  .hero {
    .heroBody {
      h1 {
        display: none;
      }
    }
  }
}